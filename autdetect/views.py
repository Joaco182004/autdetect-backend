# Django Imports
from io import BytesIO
from django.conf import settings
from django.contrib.auth.models import User
from django.core.mail import EmailMessage, send_mail
from django.db.models import Case, Count, IntegerField, When
from django.db.models.functions import ExtractMonth, ExtractYear
from django.http import HttpResponse
from django.shortcuts import get_object_or_404, redirect, render
from django.urls import reverse
from django.utils import timezone, crypto
from django.utils.crypto import get_random_string

# Django REST Framework Imports
from rest_framework import status, viewsets
from rest_framework.authtoken.models import Token
from rest_framework.decorators import api_view, authentication_classes, permission_classes
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import TokenAuthentication
from rest_framework.response import Response

# Model Imports
from .models import InfantPatient, Psychologists, Questionnaire, UserProfile

# Serializer Imports
from .serializer import InfantPatientSerializer, PsychologistSerializer, QuestionnaireSerializer, UserProfileSerializer, UserSerializer

# ReportLab Imports
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import inch
from reportlab.pdfgen import canvas
from reportlab.platypus import Image, Paragraph, SimpleDocTemplate, Spacer, Table, TableStyle

# Python Standard Library Imports
import os
import random

def enviar_correo(user):
    activation_key = get_random_string(40)
    user_profile = UserProfile.objects.create(user=user, activation_key=activation_key)
    
    activation_url = f"http://localhost:5173/activate/{activation_key}"
    
    subject = "¬°Bienvenido/a a AutDetect üôå ! Completa tu Registro"
    html_message = f"""
    <html>
    <head></head>
    <body>
    <p>Hola,{user.email}</p>
    <p>Gracias por unirte a <strong>AutDetect</strong>, la plataforma dedicada a la detecci√≥n temprana de autismo. Nos alegra que formes parte de nuestra comunidad de profesionales comprometidos con el bienestar de los ni√±os y sus familias. üòä</p>
    <p>Para completar tu registro, por favor sigue estos pasos:</p>
    <ol>
        <li><strong>Verifica tu correo electr√≥nico</strong><br>
        Haz clic en el siguiente enlace para confirmar tu direcci√≥n de correo electr√≥nico:  <a href="{activation_url}">Verificar correo</a>üîó</li>
        <li><strong>Explora nuestra aplicaci√≥n web</strong><br>
        Navega por la aplicaci√≥n web y sus diferentes funcionalidades para comenzar a utilizar la plataforma en tus evaluaciones. üõ†Ô∏è</li>
    </ol>
    <p>Gracias por unirte a <strong>AutDetect</strong>!<br>
    Estamos emocionados de contar contigo en nuestra misi√≥n de hacer la diferencia. üåü</p>
    <p>Atentamente,<br>
    <strong>AutDetect</strong><br>
    [autdetect@gmail.com] ‚úâÔ∏è</p>
    </body>
    </html>
    """
    from_email = settings.DEFAULT_FROM_EMAIL
    recipient_list = [user.email]

    try:
        email = EmailMessage(
            subject=subject,
            body=html_message,
            from_email=from_email,
            to=recipient_list,
        )
        email.content_subtype = 'html'  # Importante para enviar HTML
        email.send()
    except Exception as e:
        print(f"Error al enviar correo: {e}")

@api_view(['GET'])
def activate_account(request, activation_key):
    activation_key = activation_key.rstrip('/')
    try:
        profile = UserProfile.objects.get(activation_key=activation_key)
        print(activation_key)
        if profile.key_expires < timezone.now():
            print(profile.key_expires)
            print(timezone.now())
            return HttpResponse('El enlace ha expirado.', status=400)
        user = profile.user
        user.is_active = True
        user.save()
        return HttpResponse('Cuenta activada con √©xito. Puedes iniciar sesi√≥n.')
    except UserProfile.DoesNotExist:
        return HttpResponse('Enlace inv√°lido.', status=400)

@api_view(['POST'])
def login(request):
    user = get_object_or_404(User, username=request.data['username'])

    if not user.is_active:
        return Response({"error": "El usuario no esta activo."}, status=status.HTTP_403_FORBIDDEN)
    if not user.check_password(request.data['password']):
        return Response({"error": "La contrase√±a es inv√°lida."}, status=status.HTTP_400_BAD_REQUEST)

    token, created = Token.objects.get_or_create(user=user)
    serializer = UserSerializer(instance=user)

    return Response({"token": token.key, "user": serializer.data}, status=status.HTTP_200_OK)

@api_view(['POST'])
def register(request):
    username = request.data.get('email', '')
    # Buscar el usuario existente
    existing_user = User.objects.filter(username=username).first()

    if existing_user:
        if existing_user.is_active == False:
        # Si el usuario existe, eli inar usuario y psic√≥logo asociados
            Token.objects.filter(user=existing_user).delete()  # Eliminar el token existente
            Psychologists.objects.filter(user=existing_user).delete()  # Eliminar el psic√≥logo existente
            existing_user.delete() # Eliminar el usuario existente

    # Crear un nuevo usuario
    user_serializer = UserSerializer(data=request.data)
    if user_serializer.is_valid():
        user = user_serializer.save()
        user.set_password(request.data.get('password', ''))
        user.is_active = False  # Desactivar la cuenta hasta la verificaci√≥n
        user.save()
    else:
        return Response(user_serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    # Crear un nuevo token para el usuario
    token, created = Token.objects.get_or_create(user=user)

    # Datos del psic√≥logo
    psychologist_data = {
        'user': user.id,
        'full_name': request.data.get('full_name', ''),
        'dni': request.data.get('dni', ''),
        'tuition_number': request.data.get('tuition_number', ''),
        'email': request.data.get('email', ''),
    }
    # Crear un nuevo psic√≥logo
    psychologist_serializer = PsychologistSerializer(data=psychologist_data)

    if psychologist_serializer.is_valid():
        psychologist_serializer.save()
        print(psychologist_data)
        enviar_correo(user)  # Enviar correo con el enlace de verificaci√≥n
        return Response({
            'token': token.key,
            'user': user_serializer.data,
            'psychologist': psychologist_serializer.data
        }, status=status.HTTP_201_CREATED)
    else:
        return Response(psychologist_serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class PsychologistView(viewsets.ModelViewSet):
    serializer_class = PsychologistSerializer
    queryset = Psychologists.objects.all()

@authentication_classes([TokenAuthentication])
@permission_classes([IsAuthenticated])
class InfantPatientView(viewsets.ModelViewSet):
    serializer_class = InfantPatientSerializer
    queryset = InfantPatient.objects.all()
    
@authentication_classes([TokenAuthentication])
@permission_classes([IsAuthenticated])
class QuestionnaireView(viewsets.ModelViewSet):
    serializer_class = QuestionnaireSerializer
    queryset = Questionnaire.objects.all()

@authentication_classes([TokenAuthentication])
@permission_classes([IsAuthenticated])
class UserProfileView(viewsets.ModelViewSet):
    serializer_class = UserProfileSerializer
    queryset = UserProfile.objects.all()

@api_view(['GET'])
@authentication_classes([TokenAuthentication])
@permission_classes([IsAuthenticated])
def patients_by_month(request):
    monthly_data = (
        Questionnaire.objects
        .annotate(
            year=ExtractYear('date_evaluation'),
            month=ExtractMonth('date_evaluation')
        )
        .values('year', 'month','patient__psychology')
        .annotate(total=Count('id'))
        .order_by('year', 'month','patient__psychology')
    )
    return Response(monthly_data)


@api_view(['GET'])
@authentication_classes([TokenAuthentication])
@permission_classes([IsAuthenticated])
def patients_by_month_autism(request):
    monthly_data = (
        Questionnaire.objects
        .annotate(
            year=ExtractYear('date_evaluation'),  
            month=ExtractMonth('date_evaluation')
        )
        .values('year', 'month','patient__psychology')
        .annotate(
            paciente_con_DT=Count(Case(When(result=0, then=1), output_field=IntegerField())),
            paciente_con_TEA=Count(Case(When(result=1, then=1), output_field=IntegerField())),
        )
        .order_by('year', 'month','patient__psychology')
    )
    return Response(monthly_data)
    
@api_view(['GET'])
@authentication_classes([TokenAuthentication])
@permission_classes([IsAuthenticated])
def patients_by_gender(request):
    gender_data = (
        InfantPatient.objects
        .values('gender','psychology')
        .annotate(total=Count('id'))
        .order_by('gender','psychology')
    )
    
    return Response(gender_data)

def change_email(user,email_change):
    user_profile = UserProfile.objects.filter(user=user).first()

    verification_code = random.randint(100000, 999999)

    if user_profile:
        user_profile.code_change = verification_code
        user_profile.save()
    
    subject = "AutDetect - Cambio de Correo Electr√≥nico üìß"
    html_message = f"""
    <html>
    <head></head>
    <body>
    <p>Hola, {email_change}</p>
    <p>Hemos recibido una solicitud para cambiar la direcci√≥n de correo electr√≥nico asociada a tu cuenta en <strong>AutDetect</strong>. Si has solicitado este cambio, por favor confirma tu nueva direcci√≥n de correo electr√≥nico utilizando el c√≥digo de verificaci√≥n que se muestra a continuaci√≥n.</p>
    <p><strong>C√≥digo de verificaci√≥n: {verification_code}</strong></p>
    <p>Si no solicitaste este cambio, por favor ignora este correo o contacta a nuestro equipo de soporte.</p>
    <p>Gracias por formar parte de <strong>AutDetect</strong> y por tu dedicaci√≥n en la detecci√≥n temprana del autismo. Tu compromiso con esta causa es muy valioso para nosotros. üåü</p>
    <p>Atentamente,<br>
    <strong>AutDetect</strong><br>
    [autdetect@gmail.com] ‚úâÔ∏è</p>
    </body>
    </html>
    """
    from_email = settings.DEFAULT_FROM_EMAIL
    recipient_list = [email_change]

    try:
        email = EmailMessage(
            subject=subject,
            body=html_message,
            from_email=from_email,
            to=recipient_list,
        )
        email.content_subtype = 'html'  # Importante para enviar HTML
        email.send()
    except Exception as e:
        print(f"Error al enviar correo: {e}")

@api_view(['POST'])
def change_email_verification(request):
    username = request.data.get('email', '')
    existing_user = User.objects.filter(username=username).first()
    email_change = request.data.get('email_change', '')
    
    change_email(existing_user,email_change)

    return Response(status=status.HTTP_200_OK)

@api_view(['POST'])
@authentication_classes([TokenAuthentication])
@permission_classes([IsAuthenticated])
def change_username(request):
    username = request.data.get('email', '')
    existing_user = User.objects.filter(username=username).first()
    email_change = request.data.get('email_change', '')
    if existing_user:
        existing_user.username = email_change
        existing_user.email = email_change
        existing_user.save()
        psychology = Psychologists.objects.filter(email=username).first()
        if psychology:
            psychology.email = email_change
            psychology.save()
    return Response(status=status.HTTP_200_OK)

@api_view(['POST'])
def change_password(request):
    username = request.data.get('email', '')
    existing_user = User.objects.filter(username=username).first()
    password = request.data.get('password', '')
    if existing_user:
        existing_user.set_password(password)
        existing_user.save()
    return Response(status=status.HTTP_200_OK)

@api_view(['POST'])
def change_password_email(request):
    username = request.data.get('email', '')
    
    existing_user = User.objects.filter(username=username).first()
    
    user_profile = UserProfile.objects.filter(user=existing_user).first()

    verification_code = random.randint(100000, 999999)

    if user_profile:
        user_profile.code_change = verification_code
        user_profile.save()
    else:
        return Response("El correo ingresado no se encuentra registrado.", status=status.HTTP_400_BAD_REQUEST)
    
    subject = "AutDetect - Cambio de Contrase√±a üîë"
    html_message = f"""
    <html>
    <head></head>
    <body>
    <p>Hola, {username}</p>
    <p>Hemos recibido una solicitud para cambiar la contrase√±a asociada a tu cuenta en <strong>AutDetect</strong>. Si has solicitado este cambio, por favor confirma tu nueva contrase√±a utilizando el c√≥digo de verificaci√≥n que se muestra a continuaci√≥n.</p>
    <p><strong>C√≥digo de verificaci√≥n: {verification_code}</strong></p>
    <p>Si no solicitaste este cambio, por favor ignora este correo o contacta a nuestro equipo de soporte.</p>
    <p>Gracias por formar parte de <strong>AutDetect</strong> y por tu dedicaci√≥n en la detecci√≥n temprana del autismo. Tu compromiso con esta causa es muy valioso para nosotros. üåü</p>
    <p>Atentamente,<br>
    <strong>AutDetect</strong><br>
    [autdetect@gmail.com] ‚úâÔ∏è</p>
    </body>
    </html>
    """
    from_email = settings.DEFAULT_FROM_EMAIL
    recipient_list = [username]

    try:
        email = EmailMessage(
            subject=subject,
            body=html_message,
            from_email=from_email,
            to=recipient_list,
        )
        email.content_subtype = 'html'  # Importante para enviar HTML
        email.send()
        return Response(status=status.HTTP_200_OK)
    except Exception as e:
        print(f"Error al enviar correo: {e}")


@api_view(['POST'])
def validate_code(request):
    username = request.data.get('email', '')
    code = request.data.get('code', '')
    
    existing_user = User.objects.filter(username=username).first()

    if existing_user:
        print(existing_user)
        user_profile = UserProfile.objects.filter(user=existing_user).first()
        print(user_profile)
        if(user_profile.code_change == code):
            return Response({"success": True}, status=status.HTTP_200_OK)
        else:
            return Response("El c√≥digo no corresponde al c√≥digo enviado.", status=status.HTTP_400_BAD_REQUEST)

def generar_reporte_pdf():
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = 'attachment; filename="reporte.pdf"'
    buffer = BytesIO()
    # Crear el documento PDF
    doc = SimpleDocTemplate(buffer, pagesize=A4)

    # Obtener el estilo para los p√°rrafos
    styles = getSampleStyleSheet()

    # Contenido del PDF (secciones)
    elements = []

    # Ruta del logo (aseg√∫rate de colocar la ruta correcta)
    logo_path = os.path.join('crudautdetect/static/imgs/logoautdetect.png')

    logo = Image(logo_path, 100, 100)
    logo.hAlign = 'CENTER'  # Alineaci√≥n centrada del logo
    
    # Crear los encabezados de texto y centrar
    header1 = Paragraph("AutDetect", styles['Normal'])
    header2 = Paragraph("Contacto: autdetect@gmail.com", styles['Normal'])
    
    header1.hAlign = 'CENTER'  # Centrar texto
    header2.hAlign = 'CENTER'  # Centrar texto
    
    # A√±adir el logo centrado
    elements.append(logo)
    
    # A√±adir un espacio
    
    elements.append(Paragraph("Reporte de detecci√≥n temprana del Trastorno Espectro Autista", styles['Title']))

    # Subt√≠tulo
    elements.append(Spacer(1, 12))
    elements.append(Paragraph("1. Respuestas del cuestionario de comportamiento", styles['Heading2']))

    # Preguntas
    questions = [
        "1. Si se√±alas algo en la habitaci√≥n, como un juguete o un animal, ¬øtu hijo(a) lo mira?",
        "2. ¬øAlguna vez has pensado que tu hijo(a) podr√≠a ser sordo(a)?",
        "3. ¬øTu hijo(a) juega a hacer cosas como beber de una taza de juguete, hablar por tel√©fono, o darle de comer a una mu√±eca o peluche?",
        "4. ¬øHace tu hijo(a) movimientos extra√±os con los dedos cerca de sus ojos, o junta sus manos o pies de manera inusual?",
        "5. ¬øTu hijo(a) se√±ala con el dedo o la mano cuando quiere algo o necesita ayuda, como un juguete o comida que no puede alcanzar?",
        "6. ¬øAlguna vez tu hijo(a) se√±ala algo solo para mostrarte, como un avi√≥n en el cielo o un animal?",
        "7. ¬øTu hijo(a) muestra inter√©s en otros ni√±os, como mirarlos, sonre√≠rles o tratar de jugar con ellos?",
        "8. ¬øTu hijo(a) te muestra cosas para llamar tu atenci√≥n, no porque necesite ayuda, sino solo para compartirlas contigo, como una flor o un juguete?",
        "9. ¬øResponde tu hijo(a) cuando lo(a) llamas por su nombre, como volte√°ndose, habl√°ndote o dejando de hacer lo que estaba haciendo?",
        "10. ¬øCuando le sonr√≠es a tu hijo(a), √©l o ella te sonr√≠e de vuelta?",
        "11. ¬øTu hijo(a) es sensible a ciertos ruidos, como la aspiradora, m√∫sica alta, o el sonido de una moto?",
        "12. ¬øTe mira tu hijo(a) a los ojos cuando le hablas, juegas con √©l/ella, o lo(a) vistes?",
        "13. ¬øUsa tu hijo(a) gestos como decir adi√≥s con la mano, aplaudir, o imitar alg√∫n sonido gracioso que haces?",
        "14. Si te giras a ver algo, ¬øtu hijo(a) trata de mirar hacia lo que est√°s mirando?",
        "15. ¬øTu hijo(a) intenta que le prestes atenci√≥n, por ejemplo, diciendo ‚Äúmira‚Äù o 'm√≠rame'?",
        "16. ¬øEntiende tu hijo(a) lo que le dices que haga, como ‚Äúpon el libro en la silla‚Äù o ‚Äútr√°eme la manta‚Äù sin necesidad de gestos?",
        "17. ¬øA tu hijo(a) le cuesta cambiar de rutina, como cambiar de horario en la escuela, salir de vacaciones, o tomar un camino diferente?",
        "18. ¬øTu hijo(a) tiene dificultades para aceptar diferentes texturas o colores de alimentos?",
        "19. ¬øTu hijo(a) tiene un inter√©s exagerado por un tipo espec√≠fico de dibujo, juego o tema?",
        "20. ¬øTu hijo(a) repite casi siempre la √∫ltima palabra que escucha de una frase dicha por otra persona?",
        "21. ¬øTu hijo(a) te jala de la mano para que hagas cosas por √©l/ella, como abrir una puerta, coger un objeto, o jugar?",
        "22. Si personas desconocidas saludan a tu hijo(a), ¬ø√©l/ella las mira o responde al saludo?",
        "23. ¬øTu hijo(a) puede jugar con ni√±os que no conoce cuando est√° en el parque?",
        "24. ¬øTu hijo(a) se integra al grupo de ni√±os cuando va a una fiesta infantil?",
    ]
    for question in questions:
        elements.append(Spacer(1,5))
        elements.append(Paragraph(question, styles['Normal']))

    # Agregar un salto de p√°gina
    elements.append(Spacer(1, 12))

    # Subt√≠tulo de la segunda secci√≥n
    elements.append(Paragraph("2. Resultados de la evaluaci√≥n", styles['Heading2']))
    
    elements.append(Spacer(1, 12))
    # Datos de la tabla
    table_data = [
        ["Nombre", "Apellido", "Fecha de nacimiento", "Fecha de evaluaci√≥n", "Resultado", "Probabilidad"],
        ["Juan", "P√©rez", "01/01/2010", "15/08/2024", "Positivo", "85%"],
    ]

    # Crear la tabla
    table = Table(table_data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.skyblue),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.white),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
    ]))

    # A√±adir la tabla a los elementos
    elements.append(table)

    # Construir el documento PDF con el contenido
    doc.build(elements)

    buffer.seek(0)
    return buffer

@api_view(['POST'])
def send_email_report(request):
    pdf_buffer = generar_reporte_pdf()
    subject = "AutDetect - Reporte de Evaluaci√≥n üìÑ"
    html_message = f"""
    <html>
    <head></head>
    <body>
    <p>Hola, padre de familia</p>
    <p>Adjunto encontrar√°s el reporte de evaluaci√≥n de AutDetect en formato PDF.</p>
    <p>Si tienes alguna pregunta o necesitas asistencia adicional, no dudes en ponerte en contacto con nuestro equipo.</p>
    <p>Gracias por tu colaboraci√≥n en la detecci√≥n temprana del autismo.</p>
    <p>Atentamente,<br>
    <strong>AutDetect</strong><br>
    [autdetect@gmail.com] ‚úâÔ∏è</p>
    </body>
    </html>
    """
    from_email = settings.DEFAULT_FROM_EMAIL
    recipient_list = ["uni.joaquin18@gmail.com"]

    try:
        email = EmailMessage(
            subject=subject,
            body=html_message,
            from_email=from_email,
            to=recipient_list,
        )
        email.attach('reporte_autdetect.pdf', pdf_buffer.getvalue(), 'application/pdf')

        email.content_subtype = 'html'  # Importante para enviar HTML
        email.send()
        return Response(status=status.HTTP_200_OK)
    except Exception as e:
        print(f"Error al enviar correo: {e}")